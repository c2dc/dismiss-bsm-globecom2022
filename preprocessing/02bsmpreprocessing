{"cells":[{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":18902,"status":"ok","timestamp":1651605110274,"user":{"displayName":"Fernando da Silva Dutra","userId":"15997828973746649324"},"user_tz":180},"id":"F_4vjEBTELxK","outputId":"598166a6-f7a2-4316-ac3f-9feb52ed6d4d"},"outputs":[{"name":"stdout","output_type":"stream","text":["Mounted at /content/drive\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive')"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":1902,"status":"ok","timestamp":1651605112174,"user":{"displayName":"Fernando da Silva Dutra","userId":"15997828973746649324"},"user_tz":180},"id":"uXIG2U11EcBY","outputId":"38d72129-c040-4384-b1ae-1447f27b0211"},"outputs":[{"name":"stdout","output_type":"stream","text":["True /content/drive/MyDrive/dataset/veremi/veremiWithT2/simulationscsv\n","True /content/drive/MyDrive/globecom/02bsm\n","True /content/drive/MyDrive/globecom/02bsm/preprocessing\n","True /content/drive/MyDrive/globecom/02bsm/preprocessing/time\n"]}],"source":["import os\n","import pandas as pd\n","import numpy as np\n","import time\n","import warnings\n","warnings.simplefilter(action='ignore', category=FutureWarning)\n","\n","# number of bsm to be analized\n","window = '02'\n","\n","simPath = \"/content/drive/MyDrive/dataset/veremi/veremiWithT2/simulationscsv\"\n","bsmPath = \"/content/drive/MyDrive/globecom/\"+window+\"bsm\"\n","preprocPath = bsmPath+\"/preprocessing\"\n","timePath = preprocPath+\"/time\"\n","\n","paths = [simPath, bsmPath, preprocPath, timePath]\n","for p in paths:\n","  if os.path.exists(p) == False:\n","    os.mkdir(p)\n","  print(os.path.exists(p), p)\n","# os.chdir(articlePath)\n","# os.listdir()"]},{"cell_type":"code","execution_count":3,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"awtp4RqjGZfo","outputId":"2374ffab-a444-4cfb-fb0f-b2ea66f0089e","executionInfo":{"status":"ok","timestamp":1651625079539,"user_tz":180,"elapsed":1721448,"user":{"displayName":"Fernando da Silva Dutra","userId":"15997828973746649324"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["Done in 29969.92 sec"]}],"source":["np.seterr('raise')\n","# separar comunicações completas por veículos\n","os.chdir(simPath)\n","simulations = pd.Series([f for f in os.listdir() if os.path.isfile(f)]).sort_values().reset_index(drop=True)[:]\n","tlist = []\n","for simul in simulations.values:\n","  t = simul.split('.')\n","  tlist.append(int(t[0][-3:]))\n","totalsim = len(simulations)\n","os.chdir(preprocPath)\n","if os.listdir():\n","  clist = []\n","  concluded = pd.Series([f for f in os.listdir() if os.path.isfile(f)], dtype=pd.StringDtype()).sort_values().reset_index(drop=True)\n","  for concl in concluded.values:\n","    c = concl.split('.')\n","    clist.append(int(c[0][-3:]))\n","else:\n","  clist = []\n","remainlist = list(set(tlist) - set(clist))\n","while remainlist:\n","  os.chdir(preprocPath)\n","  concluded = pd.Series([f for f in os.listdir() if os.path.isfile(f)], dtype=pd.StringDtype()).sort_values().reset_index(drop=True)\n","  clist = []\n","  for concl in concluded.values:\n","    c = concl.split('.')\n","    clist.append(int(c[0][-3:]))\n","  remainlist = list(set(tlist) - set(clist))\n","  if remainlist:\n","    szremainlist = len(remainlist)\n","    item = 0\n","    sim = remainlist[item]\n","    # start preprocess\n","    start_time = time.time()\n","    os.chdir(simPath)\n","    data = pd.read_csv(simulations[sim], index_col=0)\n","    # # filtrar apenas as colunas que precisamos\n","    # data = data[['receiver', 'sender']]\n","    a = pd.Series(data['receiver'].unique().astype(int)).sort_values().reset_index(drop=True)\n","    b = pd.Series(data['sender'].unique().astype(int)).sort_values().reset_index(drop=True)\n","    vehicles = pd.concat([a, b], ignore_index=True).unique()\n","    size = len(vehicles)\n","    newdata = []\n","    dataset = []\n","\n","    for idr, r in enumerate(vehicles):\n","      # if idr <= 0:\n","        for ids, s in enumerate(data['sender'].loc[data['receiver'] == r].astype(int).unique()):\n","          # if ids <= 0:\n","            print('\\r',\n","                  'Processing simulation '+str(remainlist[item]),\n","                  ', vehicle '+str(idr+1)+' of '+str(size),\n","                  \" in {:.2f}\".format(time.time() - start_time)+' sec |',\n","                  ' faltam '+str(szremainlist)+' simulações.',\n","                  sep='', end='', flush=True)\n","            interaction = data.loc[(data['receiver'] == r) & (data['sender'] == s)]\n","            atktype = interaction['attackerType'].unique()[0]\n","            # fix atk_16 records\n","            if atktype == 16:\n","              atk_16 = []\n","              for idind, ind in enumerate(interaction.index):\n","                pxSnd = interaction['pxSnd'][ind]\n","                pySnd = interaction['pySnd'][ind]\n","                sxSnd = interaction['sxSnd'][ind]\n","                sySnd = interaction['sySnd'][ind]\n","                if idind > 0:\n","                  if sxSndOld != 0 and sxSndOld != 0:\n","                    if pxSndOld == pxSnd and pySndOld == pySnd:\n","                      atk_16.append(ind)\n","                pxSndOld = pxSnd\n","                pySndOld = pySnd\n","                sxSndOld = sxSnd\n","                sySndOld = sxSnd\n","              # print(atk_16)\n","              interaction = interaction.loc[atk_16]\n","            l = len(interaction)\n","            if l >= int(window):\n","              # print(r, s, l, atktype)\n","              newdata = np.append(newdata, [sim, r, s])                \n","              for idind, ind in enumerate(interaction[0:int(window)].index):\n","                \n","                # feature 1\n","                # RSSI\n","                feat1 = interaction['RSSI'][ind]\n","\n","                # feature 2\n","                # distance between sender and receiver\n","                pxRcv = interaction['pxRcv'][ind]\n","                pyRcv = interaction['pyRcv'][ind]\n","                pzRcv = interaction['pzRcv'][ind]\n","                pxSnd = interaction['pxSnd'][ind]\n","                pySnd = interaction['pySnd'][ind]\n","                pzSnd = interaction['pzSnd'][ind]\n","                pRcv = np.array((pxRcv, pyRcv, pzRcv))\n","                pSnd = np.array((pxSnd, pySnd, pzSnd))\n","                feat2 = np.linalg.norm(pRcv-pSnd)\n","\n","                # feature3 conformidade de deslocamento\n","                sxSnd = interaction['sxSnd'][ind]\n","                sySnd = interaction['sySnd'][ind]\n","                szSnd = interaction['szSnd'][ind]\n","                sSnd = np.array((sxSnd, sySnd, szSnd))\n","                sendTime = interaction['sendTime'][ind]\n","                if idind == 0:\n","                  feat3 = np.nan\n","                if idind >= 1:\n","                  pSndNow = pSnd\n","                  pEstimated = pSndOld + (sSndOld * (sendTime - sendTimeOld))\n","                  feat3 = np.linalg.norm(pSndNow-pEstimated)\n","                pSndOld = pSnd\n","                sSndOld = sSnd\n","                sendTimeOld = sendTime\n","                                                  \n","                newdata = np.append(newdata, [feat1, feat2, feat3])\n","\n","              newdata = np.append(newdata, atktype)\n","              dataset.append(newdata)\n","              newdata = []\n","\n","                                \n","\n","                  \n","    columns  = ['sim', 'receiver', 'sender']\n","    for i in range(int(window)):\n","      columns.append('RSSI'+str(i))\n","      columns.append('distance'+str(i))\n","      columns.append('conformity'+str(i))\n","    columns.append('attackerType')\n","    df = pd.DataFrame(dataset, columns=columns)\n","    # display(df)\n","\n","    os.chdir(preprocPath)\n","    print('\\rSaving sim'+f\"{remainlist[item]:03}\"+'.csv', sep='', end='', flush=True)\n","    if os.path.exists(preprocPath+'/sim'+f\"{remainlist[item]:03}\"+'.csv') == False:\n","      df.to_csv('sim'+f\"{remainlist[item]:03}\"+'.csv')\n","    \n","    # log the time of preprocessing\n","    os.chdir(timePath)\n","    simTime = time.time() - start_time\n","    data = {\"simulation\": \"sim\"+f\"{remainlist[item]:03}\", \"time\": simTime}\n","    try:\n","      timeDf = pd.read_csv('timePreprocessing.csv', index_col=0)\n","    except FileNotFoundError:\n","      timeDf = pd.DataFrame({\"simulation\": [data['simulation']], \"time\": [data['time']]})\n","      timeDf.to_csv('timePreprocessing.csv')\n","    else:\n","      if (timeDf['simulation'] == data['simulation']).any():\n","        timeDf.loc[timeDf['simulation'] == data['simulation'], ['time']] = data['time']\n","        timeDf.to_csv('timePreprocessing.csv')\n","      else:    \n","        timeDf = timeDf.append(data, ignore_index=True)\n","        timeDf.to_csv('timePreprocessing.csv')\n","\n","    # retira o item da remainlist\n","    remainlist.pop(item)\n","    del clist\n","\n","os.chdir(timePath)\n","timeDf = pd.read_csv('timePreprocessing.csv', index_col=0)\n","print('\\rDone in ', \"{:.2f}\".format(timeDf['time'].sum())+' sec', sep='', end='', flush=True)"]}],"metadata":{"colab":{"background_execution":"on","collapsed_sections":[],"name":"02bsmpreprocessing","provenance":[]},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}